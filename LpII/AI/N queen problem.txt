// Implement a solution for a Constraint Satisfaction Problem using Branch and Bound and
// Backtracking for n-queens problem or a graph coloring problem.

#include <iostream>
#include <vector>
using namespace std;

// Function to display the chessboard
void displayBoard(const vector<int> &board) {
    int n = board.size();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i] == j)
                cout << "Q ";
            else
                cout << ". ";
        }
        cout << endl;
    }
    cout << "\n";
}

// Check if the position is safe
bool isSafe(const vector<int> &board, int row, int col) {
    for (int i = 0; i < row; i++) {
        if (board[i] == col || abs(board[i] - col) == abs(i - row))
            return false;
    }
    return true;
}

// Recursive function using backtracking with branch and bound
void solveNQueens(int n, vector<int> &board, int row, vector<vector<int>> &solutions) {
    if (row == n) {
        solutions.push_back(board);
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col)) {
            board[row] = col;
            solveNQueens(n, board, row + 1, solutions);
            board[row] = -1; // Backtrack
        }
    }
}

int main() {
    int n;
    cout << "Enter the value of N for N-Queens problem: ";
    cin >> n;

    vector<int> board(n, -1);
    vector<vector<int>> solutions;

    solveNQueens(n, board, 0, solutions);

    cout << "\nTotal Solutions: " << solutions.size() << "\n";
    for (int i = 0; i < solutions.size(); i++) {
        cout << "Solution " << i + 1 << ":\n";
        displayBoard(solutions[i]);
    }

    return 0;
}

// Constraint Satisfaction Problem (CSP) Terminology:
// Variable: A symbol representing an unknown value. In the n-queens problem, each row represents a variable, and the column number of the queen in that row is the value.

// Domain: The set of possible values for each variable. For the n-queens problem, the domain of each row is the set of column indices (0 to n-1).

// Constraint: A rule that defines allowable combinations of values. In the n-queens problem, the main constraints are:

// No two queens can share the same row.

// No two queens can share the same column.

// No two queens can share the same diagonal.

// Backtracking: A recursive technique for exploring all potential solutions. It involves placing queens one by one and undoing placements when conflicts occur.

// Branch and Bound: An optimization of backtracking that eliminates branches that cannot lead to a solution. For the n-queens problem, this is achieved by:

// Stopping early if a queen cannot be placed without conflict.

// Pruning invalid positions based on constraints.

// Approach:
// We use backtracking to explore each row, attempting to place a queen in any available column.

// For each placement:

// We check if the placement is valid using the constraints.

// If valid, we move to the next row (branch).

// If invalid, we backtrack.

// The Branch and Bound technique ensures we do not explore invalid branches (i.e., columns and diagonals already attacked by previous queens).
//Time Complexity:
// Branching Factor (b): In the n-queens problem, each row can have at most 
// 𝑛
// n possible column choices for a queen. But this value decreases as constraints (attacks) increase.

// Solution Depth (d): The depth of the recursion tree is 
// 𝑛
// n (one queen per row).

// In the worst case (no constraints), the branching factor is 
// 𝑏
// =
// 𝑛
// b=n, making the time complexity:

// 𝑂
// (
// 𝑏
// 𝑑
// )
// =
// 𝑂
// (
// 𝑛
// 𝑛
// )
// O(b 
// d
//  )=O(n 
// n
//  )
// However, due to the constraints (Branch and Bound), we eliminate many invalid branches. This optimization significantly reduces the search space. The exact complexity is difficult to express without specific pruning analysis, but it is generally between:

// 𝑂
// (
// 𝑛
// !
// )
//  (Highly Pruned) and 
// 𝑂
// (
// 𝑛
// 𝑛
// )
//  (Worst Case)
// O(n!) (Highly Pruned) and O(n 
// n
//  ) (Worst Case)
// Space Complexity:
// The space complexity is primarily determined by:

// The recursion stack: 
// 𝑂
// (
// 𝑑
// )
// =
// 𝑂
// (
// 𝑛
// )
// O(d)=O(n).

// The board (vector of size 
// 𝑛
// n): 
// 𝑂
// (
// 𝑛
// )
// O(n).

// Storage for all solutions: 
// 𝑂
// (
// 𝑆
// ×
// 𝑛
// )
// O(S×n), where 
// 𝑆
// S is the number of solutions.

// For a single solution (without storing all solutions), the space complexity is:

// 𝑂
// (
// 𝑛
// )
// O(n)





// Branch and Bound: Definition
// Branch and Bound (B&B) is an optimization technique for solving complex problems, typically used in combinatorial optimization and constraint satisfaction problems (CSPs).

// How Branch and Bound Works:
// Branching:

// The problem is divided into smaller subproblems (branches).

// Each branch explores a potential solution or decision.

// Bounding:

// Each branch has a bound (a limit or constraint) that helps in determining whether it is worth exploring further.

// If a branch violates a constraint or cannot yield a better solution than an existing one, it is pruned (cut off).

// Key Characteristics:
// Pruning Invalid Branches: If a branch is known to lead to an invalid or suboptimal solution, it is not explored.

// Efficient Search: Only the branches that can potentially lead to a solution are explored.

// Optimal for Certain Problems: Ensures an optimal solution if properly implemented.

// Example: N-Queens with Branch and Bound
// The N-Queens problem is solved using Branch and Bound by:

// Branching: Placing a queen in each row.

// Bounding: Checking if the queen placement is safe (not attacking any other queen).

// Pruning: Skipping branches where a queen cannot be placed safely.
